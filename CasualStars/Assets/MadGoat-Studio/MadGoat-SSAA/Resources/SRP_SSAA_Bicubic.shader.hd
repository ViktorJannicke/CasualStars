Shader "Hidden/SSAA_Bicubic_HDRP"
{
    Properties
    {
        [HideInInspector]_MainTex("Base (RGB)", 2D) = "white" {}
    }
 
    HLSLINCLUDE
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Include/_SSAA_Utils.cginc"

#include "UnityShaderVariables.cginc"

  float2 FixVFlip(float2 texcoord)
    {
#if UNITY_UV_STARTS_AT_TOP
        bool flip = _ProjectionParams.x > 0;
#else
        bool flip = _ProjectionParams.x < 0;
#endif
        if (flip) texcoord.y = 1 - texcoord.y;
        return texcoord;
    }

    TEXTURE2D(_MainTex);
    SAMPLER(sampler_MainTex);
 
	float _ResizeHeight;
	float _ResizeWidth;
	float _Sharpness;
	float _SampleDistance;

    // Vertex shader (procedural fullscreen triangle)
    void Vertex(
        uint vertexID : SV_VertexID,
        out float4 positionCS : SV_POSITION,
        out float2 texcoord : TEXCOORD0
    )
    {
        positionCS = GetFullScreenTriangleVertexPosition(vertexID);
        texcoord = FixVFlip(GetFullScreenTriangleTexCoord(vertexID));
    }
 
    // Fragment shader
    float4 Fragment(
        float4 positionCS : SV_POSITION,
        float2 texcoord : TEXCOORD0
    ) : SV_Target
    {
		float4 mid = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, texcoord);
		float4 tex = float4(1 / _ResizeWidth, 1 / _ResizeHeight, _ResizeWidth, _ResizeHeight);
				
		float2 uv = texcoord * tex.zw + 0.5;

		float2 iuv = floor(uv);
		float2 fuv = frac(uv);

		float ampl0x = ampl0(fuv.x);
		float ampl1x = ampl1(fuv.x);
		float off0x = off0(fuv.x);
		float off1x = off1(fuv.x);
		float off0y = off0(fuv.y);
		float off1y = off1(fuv.y);

		float2 pixel0 = (float2(iuv.x + off0x, iuv.y + off0y) - 0.5) * tex.xy;
		float2 pixel1 = (float2(iuv.x + off1x, iuv.y + off0y) - 0.5) * tex.xy;
		float2 pixel2 = (float2(iuv.x + off0x, iuv.y + off1y) - 0.5) * tex.xy;
		float2 pixel3 = (float2(iuv.x + off1x, iuv.y + off1y) - 0.5) * tex.xy;

		float4 col = ampl0(fuv.y) * (ampl0x * SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, pixel0) +
			ampl1x * SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, pixel1)) +
			ampl1(fuv.y) * (ampl0x * SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, pixel2) +
			ampl1x * SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, pixel3));
		return lerp(col, mid, _Sharpness);

    }
    ENDHLSL
 
    SubShader
    {
        Cull Off ZWrite Off ZTest Always
        Pass
        {
            HLSLPROGRAM
            #pragma vertex Vertex
            #pragma fragment Fragment
            ENDHLSL
        }
    }
}
